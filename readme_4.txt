1. Чим змінна відрізняється від масиву
1.Змінна зберігає одне значення (наприклад, ціле число або рядок), а масив — це структура даних, яка зберігає кілька значень одного типу, доступ до яких здійснюється через індекси.
2. Що таке стек? Що таке купа? Яка між ними різниця?
2.Стек — це область пам'яті, де зберігаються локальні змінні та виклики функцій, працює за принципом LIFO (останнім прийшов, першим пішов). Купа — це область пам'яті для динамічного розміщення об'єктів, де програма має керувати пам'яттю. Головна різниця — стек автоматично звільняє пам'ять після виконання функції, а в купі пам'ять очищується через збирач сміття (Garbage Collector).
3. Чи може змінна бути розташована у стеку? Безпосередньо у купі? В об’єкті у купі? Чи може
масив бути розташований у стеку? Безпосередньо у купі? В об’єкті у купі?
3.Змінна може бути розташована у стеці (локальна змінна) або в об'єкті у купі (як поле об'єкта). Масив завжди знаходиться в купі, але його посилання може бути у стеці або в об'єкті у купі.
4. Чим посилання на масив відрізняється від масиву? Чи може посилання на масив бути
розташовано у стеку? Безпосередньо у купі? В об’єкті у купі?
4.Посилання на масив — це вказівник на місце в пам'яті, де зберігається масив. Сам масив знаходиться в купі, а посилання може бути у стеці або в об'єкті у купі.
5. Якщо масив складається з 10 комірок, які індекси мають перша та остання комірки?
5.Індекси першої та останньої комірок масиву — 0 та 9 (для масиву з 10 елементів).
6. Що буде, якщо звернутися до неіснуючої комірки у масиві?
6.Якщо звернутися до неіснуючої комірки масиву, виникне виняток (Exception) типу ArrayIndexOutOfBoundsException.
7. При створенні нового масиву без явної ініціалізації усі його комірки будуть проініціалізовані:
- спеціальними значеннями за замовчуванням?
- довільними значеннями, що знаходяться в цей час у пам’яті, яку виділено під масив?
7.При створенні нового масиву без ініціалізації всі його комірки будуть проініціалізовані значеннями за замовчуванням (0 для чисел, false для булевих значень, null для об'єктів).
8. Як дізнатися номер першої та останньої комірки масиву, якщо відомо лише посилання на нього?
8.Номер першої комірки — 0, останньої — це значення array.length - 1.
9. Як змінити розмір масиву?
9.Розмір масиву не можна змінити. Для зміни потрібно створити новий масив більшого розміру і скопіювати в нього старі значення.
10. Що відбувається з масивом при копіюванні посилання на нього?
10.При копіюванні посилання на масив обидва посилання вказують на той самий масив в пам'яті.
11. Що відбувається з масивом при втрачанні посилання на нього?
11.При втраті посилання на масив, масив стає недоступним, і його пам'ять може бути автоматично звільнена збирачем сміття.
12. Чим відрізняються конструкції «for» та «for-each» при роботі з масивами? Які переваги та
недоліки кожного з варіантів?
for дозволяє керувати індексами та змінювати їх вручну, тоді як for-each спрощує ітерацію без доступу до індексів.
 Перевага for-each — зручність, недолік — неможливість змінювати індекси або елементи масиву.
13. Чи можна у масив «double[]» записати значення «int»? Чи можна у масив «int[]» записати
значення «double»?
У масив double[] можна записати значення типу int, оскільки int може бути неявно перетворений на double. Але в масив int[] не можна записати значення типу double, оскільки це призведе до втрати даних і викличе помилку компіляції.
