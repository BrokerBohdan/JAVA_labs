1. Що таке структурне програмування?
1.Структурне програмування — це парадигма програмування, яка передбачає розбиття програми на блоки, що легко читаються і підтримуються.
2. Назвіть основні конструкції структурного програмування.
2. Основні конструкції структурного програмування:
    ☼послідовність;
    ☼умовний оператор;
    ☼цикли.
3. Назвіть основні принципи структурного програмування.
3. Принципи структурного програмування:

    ☼Лінійна послідовність дій.
    ☼Використання умов і циклів.
    ☼Мінімізація використання GOTO (або його відсутність).
4. Поясніть, чому в більшості мов програмування не радять використовувати оператор GOTO, а в
мові Java його взагалі немає?
4.Оператор GOTO ускладнює код, роблячи його менш зрозумілим та підтримуваним, що призводить до "спагеті-коду". У Java немає GOTO, щоб уникнути поганої практики.
5. Що таке спагеті-код?
5.Спагеті-код — це заплутаний код, який важко читати і розуміти, часто через надмірне використання GOTO або неправильну структуру.
6. Що таке проектування зверху-вниз? В чому його переваги?
6.Проектування зверху-вниз — це підхід, де програма розбивається на великі задачі, а потім кожна з них ділиться на менші. Переваги: легша організація, краща структура коду.
7. Що таке область видимості ідентифікатора?
7.Область видимості — це частина коду, в якій ідентифікатор (змінна, функція) доступний для використання.
8. Що таке блок? Як блоки впливають на область видимості?
8.Блок — це набір інструкцій, що обмежений фігурними дужками {}. Блок визначає область видимості змінних, оголошених у ньому.
9. Наведіть приклади, у яких випадках краще використовувати наступні оператори та конструкції:
- if
- if-else
- ланцюги if-else if -else if...
- switch
- тернарна умовна операція ?:
9.Приклади використання:
    if — коли потрібно перевірити одну умову.
    if-else — для перевірки двох альтернатив.
    if-else if... — коли є кілька умов.
    switch — для перевірки одного значення на кілька можливих випадків.
    тернарна операція — коли потрібно зробити вибір між двома значеннями в простій формі.
10. Наведіть приклади, у яких випадках краще використовувати наступні оператори та конструкції:
- while
- do-while
- for
10.Приклади використання:

    while — коли кількість повторень невідома заздалегідь.
    do-while — коли цикл має виконатися хоча б один раз.
    for — коли кількість повторень відома заздалегідь.
11. Чим оператор break відрізняється від оператора continue?
11. break виходить із циклу повністю, continue переходить до наступної ітерації циклу.
12. Навіщо у мові Java є мітки, якщо немає goto?
12. У Java є мітки для контролю потоку у вкладених циклах та для більш читабельного виходу з них.
13. До якого результату призведе виконання наступного фрагменту коду? Перевірте. Поясніть.
boolean a = false;
boolean b = false;
if (a=false) {
System.out.println(&quot;a is false&quot;);
}
if (b=true) {
System.out.println(&quot;b is true&quot;);
}
if (a=b) {
System.out.println(&quot;a = b&quot;);
}
 13.   Результат:

    Виведе "a is false" через присвоєння a=false.
    Виведе "b is true" через присвоєння b=true.
    Виведе "a = b", бо a=b.
14. До якого результату призведе виконання наступного фрагменту коду? Перевірте. Поясніть.
int a = 1;
a++;
++a;
switch(a) {
case 1: System.out.println("1");
case 2: System.out.println("2");
case 3: System.out.println("3");
case 4: System.out.println("4");
}
14. Результат: виведе "4", оскільки після інкрементів a=3, але через відсутність break, виконуються всі case до кінця.
15. До якого результату призведе виконання наступного фрагменту коду (true/false)? Перевірте.
Поясніть.
double sum = 0;
// Let's find: 1 + 1/2 + 1/3 + 1/4 + 1/5 + ...
for(int i=1; i<10; i++) {
sum = sum + 1/i;
}
System.out.println(sum > 1);
15.Результат: false, оскільки в циклі виконується ціле ділення, тому кожна додана частка дорівнює нулю.