1. Чим інтерфейс Set відрізняється від інтерфейсів Collection та List?

    Collection — це базовий інтерфейс для роботи зі структурами даних, що містять колекції об'єктів (наприклад, Set, List, Queue).
    Set — це похідний інтерфейс від Collection, який не дозволяє зберігати дублікати елементів.
    List — це інтерфейс, який підтримує впорядковане зберігання елементів і дозволяє дублікати.

2. Чим HashSet відрізняється від TreeSet?

    HashSet:
        Використовує хешування для зберігання елементів.
        Елементи не впорядковані.
        Працює швидше, але не гарантує порядок.
    TreeSet:
        Використовує червоне-чорне дерево.
        Елементи впорядковані природним порядком або за компаратором.
        Працює повільніше, але підтримує порядок.

3. Що таке хешування, хеш, хеш-код, хеш-функція?

    Хешування — це процес перетворення об'єкта в числове значення (хеш-код).
    Хеш — числове значення, отримане в результаті хешування.
    Хеш-код — це ціле число, яке повертає метод hashCode() об'єкта.
    Хеш-функція — функція, яка обчислює хеш-код на основі значення об'єкта.

4. Яким вимогам має відповідати коректна хеш-функція?

    Повинна бути детермінованою (для однакових об'єктів завжди один хеш).
    Має мінімізувати колізії (уникати ситуацій, коли різні об'єкти мають однаковий хеш-код).
    Має бути швидкою для обчислення.

5. Які властивості притаманні хорошій хеш-функції?

    Рівномірний розподіл хешів (хеш-коди рівномірно розподіляються по хеш-таблиці).
    Мінімізація колізій.
    Ефективність (швидкість обчислення хеш-коду).

6. Якими критеріями мають відповідати об’єкти для зберігання у HashSet?

    Повинні коректно перевизначати методи hashCode() та equals().
    Об'єкти з однаковим значенням мають мати однаковий хеш-код.

7. Переваги/недоліки HashSet у порівнянні з TreeSet?
HashSet	TreeSet
Швидше працює для пошуку/додавання/видалення	Повільніший доступ до елементів.
Не підтримує порядок елементів.	Елементи впорядковані природним чи заданим порядком.
Підтримує null.	Не дозволяє null (якщо компаратор не обробляє).
8. Чим поняття size відрізняється від capacity?

    size — кількість елементів у колекції.
    capacity — максимальна кількість елементів, яку може вмістити структура без розширення.
    Може бути:
        capacity > size — завжди можливо.
        size > capacity — неможливо (при перевищенні ємності відбувається автоматичне розширення).

9. Що таке load factor та на що він впливає?

    Load factor — коефіцієнт заповнення хеш-таблиці.
    Визначає, коли таблиця буде розширена (реорганізація відбувається при перевищенні коефіцієнта).
    Наприклад, load factor = 0.75 означає, що таблиця збільшується, коли вона заповнена на 75%.

10. Що таке асоціативний масив? Чим ключ відрізняється від значення?

    Асоціативний масив — структура даних для зберігання пар ключ-значення.
    Ключ — унікальний ідентифікатор для доступу до значення.
    Значення — дані, пов'язані з ключем.

11. Чи можуть бути однакові ключі або значення в асоціативному масиві?

    Ключі повинні бути унікальними.
    Значення можуть повторюватися.

12. Наслідки зберігання неімутабельних об'єктів:

    HashSet/HashMap (ключі): Зміна об'єкта після додавання призведе до некоректного пошуку або дублювання.
    HashMap (значення): Не призводить до проблем, оскільки значення не залежать від хеш-коду.

13. Чи можуть об'єкти без Comparable зберігатись у TreeMap?

    Ні, об'єкти повинні реалізовувати Comparable або мати Comparator для сортування.