1.Для чого призначений Collections Framework?
Для роботи з колекціями об’єктів: управління, сортування, пошук, обробка даних.

2.В чому полягає різниця між масивами та колекціями?
Масиви мають фіксований розмір, а колекції динамічні та забезпечують більше функцій для роботи з даними.

3.Які особливі властивості є у списків порівняно з іншими типами колекцій?
Списки зберігають порядок елементів і дозволяють доступ до них за індексом.

4.Чим списки відрізняються від масивів?
Списки динамічні, підтримують більше операцій і не мають фіксованого розміру, на відміну від масивів.

5.Чим ArrayList відрізняється від LinkedList?

    ArrayList швидший для доступу за індексом, але повільний для вставки/видалення.
    LinkedList краще підходить для частих вставок/видалень, але повільніший для доступу за індексом.
    Використання залежить від задачі.

6.Що таке Iterator? В чому його переваги?
Iterator — це об'єкт для послідовного перебору елементів колекції.

    Переваги: універсальність, уникнення помилок при зміні колекції під час ітерації.

7.Що таке типізовані та нетипізовані колекції?

    Типізовані (Generics) зберігають об’єкти одного типу, забезпечуючи безпеку.
    Нетипізовані приймають будь-які типи, але можуть спричиняти помилки типів.

8.Для чого потрібен інтерфейс RandomAccess?
Для маркування колекцій, які забезпечують швидкий доступ до елементів за індексом (наприклад, ArrayList).

9.Чим Collection відрізняється від Collections?

    Collection — базовий інтерфейс для всіх колекцій.
    Collections — утилітний клас із статичними методами для роботи з колекціями (сортування, пошук тощо).